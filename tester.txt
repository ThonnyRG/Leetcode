// La clase creadora declara el método fábrica que debe devolver
// un objeto de una clase de producto. Normalmente, las
// subclases de la creadora proporcionan la implementación de
// este método.
abstract class Dialog {
  // La creadora también puede proporcionar cierta
  // implementación por defecto del método fábrica.
  Button createButton();

  // Observa que, a pesar de su nombre, la principal
  // responsabilidad de la creadora no es crear productos.
  // Normalmente contiene cierta lógica de negocio que depende
  // de los objetos de producto devueltos por el método
  // fábrica. Las subclases pueden cambiar indirectamente esa
  // lógica de negocio sobrescribiendo el método fábrica y
  // devolviendo desde él un tipo diferente de producto.
  void render() {
    // Invoca el método fábrica para crear un objeto de
    // producto.
    Button okButton = createButton();
    // Ahora utiliza el producto.
    okButton.onClick(closeDialog);
    okButton.render();
  }

  void closeDialog() {
    print("Dialog cerrado");
  }
}

// Los creadores concretos sobrescriben el método fábrica para
// cambiar el tipo de producto resultante.
class WindowsDialog extends Dialog {
  @override
  Button createButton() {
    return WindowsButton();
  }
}

class WebDialog extends Dialog {
  @override
  Button createButton() {
    return HTMLButton();
  }
}

// La interfaz de producto declara las operaciones que todos los
// productos concretos deben implementar.
abstract class Button {
  void render();
  void onClick(Function f);
}

// Los productos concretos proporcionan varias implementaciones
// de la interfaz de producto.

class WindowsButton implements Button {
  @override
  void render() {
    print("Representa un botón en estilo Windows.");
  }

  @override
  void onClick(Function f) {
    print("Vincula un evento clic de OS nativo.");
  }
}

class HTMLButton implements Button {
  @override
  void render() {
    print("Devuelve una representación HTML de un botón.");
  }

  @override
  void onClick(Function f) {
    print("Vincula un evento clic de navegador web.");
  }
}

class Application {
  Dialog dialog;

  // La aplicación elige un tipo de creador dependiendo de la
  // configuración actual o los ajustes del entorno.
  void initialize() {
    var config = readApplicationConfigFile();

    if (config['OS'] == "Windows") {
      dialog = WindowsDialog();
    } else if (config['OS'] == "Web") {
      dialog = WebDialog();
    } else {
      throw Exception("Error! Unknown operating system.");
    }
  }

  // El código cliente funciona con una instancia de un
  // creador concreto, aunque a través de su interfaz base.
  // Siempre y cuando el cliente siga funcionando con el
  // creador a través de la interfaz base, puedes pasarle
  // cualquier subclase del creador.
  void main() {
    initialize();
    dialog.render();
  }

  Map<String, String> readApplicationConfigFile() {
    // Lógica para leer la configuración del archivo
    return {'OS': 'Windows'}; // Ejemplo: configuración predeterminada
  }
}

void main() {
  var app = Application();
  app.main();
}
